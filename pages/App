import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import DataTable from 'react-data-table-component';
import Swal from 'sweetalert2';
import authHeader from '../services/auth-header';
import { BASE_URL } from '../services/Api';
import { Spinner } from 'react-bootstrap'; // Assuming you have a Spinner component, otherwise create one

const Bar = () => {
    const navigate = useNavigate();
    const [selectedFile, setSelectedFile] = useState(null);
    const [files, setFiles] = useState([]);
    const [loading, setLoading] = useState(false); // Loading state

    const handleFileChange = (event) => {
        setSelectedFile(event.target.files[0]);
    };

    const handleUpload = async () => {
        if (!selectedFile) return;

        const formData = new FormData();
        formData.append('files', selectedFile);

        try {
            await axios.post(BASE_URL + 'file', formData, {
                headers: authHeader(),
            });
            fetchFiles();
            setSelectedFile(null);
        } catch (error) {
            console.error('Error uploading file', error);
        }
    };

    const fetchFiles = async () => {
        try {
            const response = await axios.get(BASE_URL + 'getAll', {
                headers: authHeader(),
            });
            setFiles(response.data);
        } catch (error) {
            console.error('Error fetching files', error);
        }
    };

    useEffect(() => {
        fetchFiles();
    }, []);

    const handleMatch = async (id) => {
        setLoading(true);
        try {
            await axios.get(BASE_URL + `ranking/match/${id}`, {
                headers: authHeader(),
            });
            navigate(`/cs/${id}`);
        } catch (error) {
            console.error('Error matching file', error);
        } finally {
            setLoading(false);
        }
    };

    const handleDelete = (id) => {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!',
        }).then(async (result) => {
            if (result.isConfirmed) {
                try {
                    await axios.delete(BASE_URL + `delete/${id}`, {
                        headers: authHeader(),
                    });
                    fetchFiles();
                    Swal.fire('Deleted!', 'Your file has been deleted.', 'success');
                } catch (error) {
                    console.error('Error deleting file', error);
                }
            }
        });
    };

    return (
        <div>
            {loading && (
                <div style={styles.loadingOverlay}>
                    <Spinner animation="border" variant="primary" /> {/* Assuming you have a Spinner component */}
                </div>
            )}
            <div className='card'>
                <div className='card-header'>
                    <h1>Upload File</h1>
                    <div className='row'>
                        <div className='col-6'>
                            <input type="file" className='form-control' onChange={handleFileChange} />
                        </div>
                        <div className='col-1'>
                            <button onClick={handleUpload} className="btn btn-primary">Upload</button>
                        </div>
                    </div>
                </div>
                <div className='card-body'>
                    <DataTable
                        columns={[
                            { name: "ID", selector: "id", sortable: true },
                            { name: "File Name", selector: "name", sortable: true },
                            {
                                name: "Action",
                                cell: row => (
                                    <>
                                        <button className="btn btn-sm btn-warning" onClick={() => handleMatch(row.id)}>Generate</button>
                                        <button className="btn btn-sm btn-danger" onClick={() => handleDelete(row.id)}>Delete</button>
                                    </>
                                ),
                                sortable: false,
                            }
                        ]}
                        data={files}
                        pagination
                    />
                </div>
            </div>
        </div>
    );
};

const styles = {
    loadingOverlay: {
        position: 'fixed',
        top: 0,
        left: 0,
        width: '100%',
        height: '100%',
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: 'rgba(255, 255, 255, 0.7)',
        zIndex: 1000,
    }
};

export default Bar;






//////
import React, { useState, useEffect } from 'react';
import './App.css';
import Login from './components/Login/Login';
import { Routes, Route, useNavigate } from "react-router-dom";
import StaffTable from './components/Masters/Staff/StaffTable';
import Create from './components/Masters/Staff/Create';
import Edit from './components/Masters/Staff/Edit';
import View from './components/Masters/Staff/View';
import Sidebar from './Sidebar/Sidebar';
import ArtistCreate from './components/Masters/Artist/Create';
import ArtistTable from './components/Masters/Artist/ArtistTable';
import ArtistEdit from './components/Masters/Artist/Edit';
import ArtistView from './components/Masters/Artist/View';
import SongCreate from './components/Masters/Songs/Create';
import SongTable from './components/Masters/Songs/SongTable';
import SongEdit from './components/Masters/Songs/Edit';
import SongView from './components/Masters/Songs/View';
import SocietyCreate from './components/Masters/Society/Create';
import SocietyTable from './components/Masters/Society/SocietyTable';
import SocietyView from './components/Masters/Society/View';
import SocietyEdit from './components/Masters/Society/Edit';
import ClientCreate from './components/Masters/Client/Create';
import ClientTable from './components/Masters/Client/ClientTable';
import ClientEdit from './components/Masters/Client/Edit';
import ClientView from './components/Masters/Client/ClientView';
import Testing from './components/RankingUpload/Testing';
import Bar from './components/RankingUpload/Bar';
import Dashboard from './components/Dashboard/Dashboard';
import jwtDecode from 'jwt-decode';
import { CardFooter } from 'react-bootstrap';
import FinalUpload from './components/RankingUpload/FinalUpload/FinalUpload';

function App() {
  const navigate = useNavigate();
  const [isLoggedIn, setIsLoggedIn] = useState(false);

  const handleLogin = () => {
    setIsLoggedIn(true);
    navigate('/home');
  };

  const handleLogout = () => {
    localStorage.removeItem('token');
    setIsLoggedIn(false);
    navigate('/login');
  };

  useEffect(() => {
    const token = localStorage.getItem('token');
    if (token) {
      try {
        const decoded = jwtDecode(token);
        const exp = decoded.exp * 1000;
        if (exp < Date.now()) {
          handleLogout(); // Token expired, so log out and navigate to login
        } else {
          setIsLoggedIn(true);
        }
      } catch (error) {
        handleLogout(); // Token is invalid, so log out and navigate to login
      }
    }
  }, [navigate]);

  return (
    <div>
      {isLoggedIn ? (
        <Sidebar onLogout={handleLogout}>
          <Routes>
            <Route path="/home" element={<Dashboard />} />
            <Route path='/cs/:id' element={<Testing />} />
            <Route path='/bar' element={<Bar />} />
            <Route path='/screate' element={<Create />} />
            <Route path='/sindex/:pointindex' element={<StaffTable />} />
            <Route path='/sedit/:id/:pointindex' element={<Edit />} />
            <Route path='/sview/:id/:pointindex' element={<View />} />
            <Route path='/artistCreate' element={<ArtistCreate />} />
            <Route path='/artistTable/:pointindex' element={<ArtistTable />} />
            <Route path='/artistEdit/:id/:pointindex' element={<ArtistEdit />} />
            <Route path='/artistView/:id/:pointindex' element={<ArtistView />} />
            <Route path='/songCreate' element={<SongCreate />} />
            <Route path='/songTable/:pointindex' element={<SongTable />} />
            <Route path='/songEdit/:id/:pointindex' element={<SongEdit />} />
            <Route path='/songView/:id/:pointindex' element={<SongView />} />
            <Route path='/societyCreate' element={<SocietyCreate />} />
            <Route path='/societyTable/:pointindex' element={<SocietyTable />} />
            <Route path='/societyEdit/:id/:pointindex' element={<SocietyEdit />} />
            <Route path='/societyView/:id/:pointindex' element={<SocietyView />} />
            <Route path='/clientCreate' element={<ClientCreate />} />
            <Route path='/clientTable/:pointindex' element={<ClientTable />} />
            <Route path='/clientEdit/:id/:pointindex' element={<ClientEdit />} />
            <Route path='/clientView/:id/:pointindex' element={<ClientView />} />
            <Route path='/final' element={<FinalUpload />} />
          </Routes>
        </Sidebar>
      ) : (
        <Routes>
          <Route path="/login" element={<Login />} />
          <Route path="/" element={<Login />} />
        </Routes>
      )}
      <CardFooter className='text-center text-muted'>
        Â© 2024 LNV Digital Systems Pvt. Ltd. All Rights Reserved.
      </CardFooter>
    </div>
  );
}

export default App;
